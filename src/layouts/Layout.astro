---
interface Props {
  title: string;
  sshUser: string;
  highlightIndex: number;
}

const { title, highlightIndex, sshUser } = Astro.props;
import "normalize.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Welcome to my website!" />
    <meta property="og:url" content="https://arhan.sh" />
    <meta property="og:title" content="Arhan's Homepage" />
    <meta property="og:description" content="Welcome to my website!" />
    <meta property="og:image" content="https://arhan.sh/favicon.ico" />
    <meta name="twitter:card" content="summary" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content="Arhan Chaudhary" />
    <link
      rel="preload"
      href="/fonts/InputMono/InputMono-Bold.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/InputMono/InputMono-Medium.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/InputMono/InputMono-Regular.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/InputMono/InputMono-ExtraLight.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <title>{title}</title>
  </head>
  <body>
    <div id="flex-wrapper">
      <div id="ssh-text">
        {sshUser}@arhan.sh:~$ <span id="troll"
          >sudo rm -rf --no-preserve-root /</span
        ><span id="cursor">â–ˆ</span>
      </div>
      <script>
        function onSSHClick() {
          document.getElementById("cursor")!.classList.add("blinking");
          const delays = [
            600, 400, 300, 300,

            500,

            300, 300,

            600,

            200, 300, 300,

            500,

            200, 100, 400, 200, 400, 300, 100, 200, 100, 200, 100, 300, 300,
            600, 300, 100, 200,

            600,

            800, 2000,
          ];
          const initialLength = delays.length;
          const troll = document.getElementById("troll")!;
          function type() {
            if (delays.length) {
              setTimeout(type, delays.shift());
              troll.style.width = `${initialLength - delays.length}ch`;
            } else {
              setTimeout(del.bind(undefined, root as ChildNode), 1000);
              troll.style.width = `0`;
            }
          }
          setTimeout(type, 2000);

          function visible(node: ChildNode): boolean {
            if (node.nodeType === Node.COMMENT_NODE) {
              return false;
            } else if (node.nodeType === Node.TEXT_NODE) {
              return node.textContent!.trim() !== "";
            } else if ((node as any).offsetParent === undefined) {
              return true;
            } else {
              return (node as any).offsetParent !== null;
            }
          }
          const root = document.querySelector("main");
          const deletionTime = 4000;
          const removeTextCharacters = 15;
          function totalNodes(node: ChildNode): number {
            const childrenTotalNodes = [...node.childNodes]
              .filter(visible)
              .reduce((p, q) => totalNodes(q) + p, 0);
            if (node.nodeType === Node.TEXT_NODE) {
              return (
                Math.ceil(node.textContent!.length / removeTextCharacters) +
                childrenTotalNodes
              );
            } else {
              return 1 + childrenTotalNodes;
            }
          }
          const totalNodesRoot = totalNodes(root as ChildNode);
          function del(node: ChildNode) {
            const children = [...node.childNodes].filter(visible);
            if (children.length > 0) {
              del(children[Math.floor(Math.random() * children.length)]);
            } else if (node !== root) {
              if (node.nodeType === Node.TEXT_NODE) {
                const text = node.textContent!.trim();
                const indicies = new Set<number>();
                while (
                  indicies.size !== removeTextCharacters &&
                  indicies.size !== text.length
                ) {
                  indicies.add(Math.floor(Math.random() * text.length));
                }
                node.textContent = text
                  .split("")
                  .map((c, i) => (indicies.has(i) ? "" : c))
                  .join("");
              } else {
                node.remove();
              }
              setTimeout(
                del.bind(undefined, root as ChildNode),
                deletionTime / totalNodesRoot
              );
            } else {
              showTroll(root);
            }
          }
          function showTroll(root: HTMLElement) {
            root.innerHTML = document.getElementById("troll-text")!.innerHTML;
          }
        }
        document
          .getElementById("ssh-text")!
          .addEventListener("click", onSSHClick, { once: true });
      </script>
      <main>
        <slot class="slot" />
      </main>
      <template id="troll-text">
        <div id="troll-flex-wrapper">
          <span>
            ðŸ¤¨ We are sorry. This page has been made unavailable under...
            mysterious circumstances.
            <br />
            Please click <span
              id="reload-text"
              onclick="window.location.reload()">here</span
            > to reload.
          </span>
        </div>
      </template>
      <div id="copyright">&copy; 2024 Arhan Chaudhary</div>
    </div>
    <label id="nav-hamburger" for="nav-toggle">
      <div></div>
      <div></div>
      <div></div>
    </label>
    <input type="checkbox" id="nav-toggle" />
    <nav>
      <label for="nav-toggle" id="nav-close">
        <div class="x-rectangle first"></div>
        <div class="x-rectangle second"></div>
      </label>
      <div id="nav-grid">
        <a href="/">Home</a>
        <a href="/projects">Projects</a>
        <a href="/blog">Blog</a>
        <a href="/ctfing">CTFing</a>
        <a href="/reading">Reading</a>
        <a href="/cubing">Cubing</a>
        <a href="/best-of-yt">Best of YouTube</a>
        <a href="/favorite-music">Favorite Music</a>
        <div id="nav-arrow">â†³</div>
      </div>
      <script is:inline define:vars={{ highlightIndex }}>
        document.querySelector(
          `nav a:nth-of-type(${highlightIndex})`
        ).style.color = "white";
      </script>
    </nav>
  </body>
</html>

<style define:vars={{ highlightIndex }}>
  @keyframes opacity {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }

  @keyframes fromTop {
    from {
      transform: translateY(-10px);
    }

    to {
      transform: initial;
    }
  }

  :root {
    --lb: hsl(180, 75%, 51%);
    --lr: hsl(333, 100%, 62%);
  }

  html {
    overflow: hidden;
  }

  body {
    display: flex;
    height: 100dvh;
    background-color: hsl(240, 6%, 10%);

    #flex-wrapper {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      direction: rtl;

      > * {
        direction: ltr;
      }

      #ssh-text {
        cursor: pointer;
        margin: 20px 68px 20px 50px;
        font-family: "Input Mono", Helvetica;
        font-weight: 500;
        color: white;
        font-size: 16px;
        line-height: normal;

        #troll {
          vertical-align: top;
          display: inline-block;
          white-space: nowrap;
          width: 0;
          overflow: hidden;
        }

        #cursor {
          margin-left: 2px;
        }

        .blinking {
          animation: blink 0.9s step-start infinite;
        }
      }

      main {
        flex: 1;
        /* Layout.astro and index.astro hardcoded to this value */
        margin-left: 100px;
        position: relative;

        #troll-flex-wrapper {
          font-family: "Input Mono", Helvetica;
          font-weight: 700;
          font-size: 28px;
          color: white;
          height: 100%;
          padding-right: 20px;
          display: flex;
          justify-content: center;
          align-items: center;
          animation: 0.3s ease-in-out both;
          animation-name: opacity, fromTop;

          #reload-text {
            cursor: pointer;
            text-decoration: underline;
          }
        }
      }

      #copyright {
        font-family: "Input Mono", Helvetica;
        font-size: 16px;
        font-weight: 200;
        color: white;
        /* Layout.astro and index.astro hardcoded to this value */
        margin-left: 100px;
        margin-bottom: 15px;
      }
    }

    nav {
      overflow: auto;
      font-family: "Input Mono", Helvetica;
      font-weight: 500;
      font-size: 15px;

      #nav-close {
        display: none;
        cursor: pointer;
        color: white;
        width: 55px;
        aspect-ratio: 1;
        left: 0;
        top: 0;
        justify-content: center;
        align-items: center;
        position: absolute;

        .x-rectangle {
          position: absolute;
          height: 6px;
          width: 30px;
          background-color: white;
        }

        .first {
          transform: rotate(45deg);
        }

        .second {
          transform: rotate(-45deg);
        }
      }

      #nav-grid {
        display: grid;
        grid-template-columns: 120px 45px;
        grid-auto-rows: min-content;
        row-gap: 30px;
        column-gap: 10px;
        padding: 60px 20px 60px 0;

        a {
          color: hsl(0, 0%, 67%);
          text-align: right;
          text-decoration-thickness: 1px;
          grid-column-start: 1;
        }

        #nav-arrow {
          color: white;
          transform: scale(1.5) scaleX(-1);
          grid-row-start: var(--highlightIndex);
          grid-column-start: 2;
          font-family: sans-serif;
          width: 27px;
          display: flex;
          justify-content: center;
          align-items: center;
        }
      }
    }

    #nav-hamburger {
      display: none;
      position: absolute;
      right: 0;
      top: 0;
      margin-top: 15px;
      margin-right: 15px;
      padding: 10px;
      height: 53px;
      flex-flow: column;
      align-items: center;
      justify-content: space-between;
      background-color: hsl(240, 6%, 10%);
      cursor: pointer;

      div {
        height: 6px;
        width: 35px;
        background-color: white;
      }
    }

    #nav-toggle {
      visibility: hidden;
      position: absolute;
    }

    /* index.astro hardcoded to this value */
    @media (max-width: 950px) {
      #ssh-text {
        margin-left: 30px !important;
      }

      main,
      #copyright {
        /* index.astro hardcoded to this value */
        margin-left: 30px !important;
      }

      #troll-flex-wrapper {
        font-size: 21px !important;
      }

      #nav-hamburger {
        display: flex;
      }

      #nav-close {
        display: flex !important;
      }

      nav {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        padding-right: 0;
        padding-left: 15px;
        background-color: hsl(240, 13%, 6%);
        transition: transform 0.3s;
        transform: translateX(100%);
      }

      #nav-toggle:checked + nav {
        transform: initial;
      }
    }
  }
</style>

<style is:global lang="scss">
  * {
    box-sizing: border-box;
  }

  .cr {
    color: var(--lr) !important;
  }

  .cb {
    color: var(--lb) !important;
  }

  @font-face {
    font-family: "Input Mono";
    src: url("/fonts/InputMono/InputMono-Bold.ttf") format("truetype");
    font-weight: 700;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Input Mono";
    src: url("/fonts/InputMono/InputMono-Medium.ttf") format("truetype");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Input Mono";
    src: url("/fonts/InputMono/InputMono-Regular.ttf") format("truetype");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Input Mono";
    src: url("/fonts/InputMono/InputMono-ExtraLight.ttf") format("truetype");
    font-weight: 200;
    font-style: normal;
    font-display: swap;
  }
</style>
