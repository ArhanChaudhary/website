---
import "normalize.css";
import { mySlugify } from "../lib/utils";
import { Font } from "astro:assets";

const sshUsers = [
  "home",
  "blog",
  "projects",
  "cubing",
  "ctf",
  "reading",
  "nuclear-bomb",
] as const;

interface Props {
  title: string;
  sshUser: (typeof sshUsers)[number];
  description?: string;
}

const {
  title,
  sshUser,
  description = "Arhan's personal website",
} = Astro.props;

const highlightIndex = sshUsers.indexOf(sshUser);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta property="og:url" content={`https://arhan.sh${Astro.url.pathname}`} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta name="description" content={description} />
    <meta property="og:image" content="https://arhan.sh/favicon.ico" />
    <meta name="twitter:card" content="summary" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <meta name="author" content="Arhan Chaudhary" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title={title}
      href={`${Astro.site}rss.xml`}
    />
    <Font cssVariable="--font-input-mono" preload />
    <title>{title}</title>
  </head>
  <body>
    <div id="content-image-overlay">
      <img />
    </div>
    <div id="flex-wrapper">
      <div id="ssh-text" class="input-mono">
        <!-- https://stackoverflow.com/a/77568291/12230735 -->
        {sshUser}@&#8203;arhan.sh:~$ <span id="troll"></span><span id="cursor"
          >â–ˆ</span
        >
      </div>
      <label id="nav-hamburger" for="nav-toggle">
        <div></div>
        <div></div>
        <div></div>
      </label>
      <script>
        // cspell:disable
        const trollText = "sudo rm -rf --no-preserve-root /";
        function onSSHClick() {
          document.getElementById("cursor")!.classList.add("blinking");
          const delays = [
            600, 400, 300, 300,

            500,

            300, 300,

            600,

            200, 300, 300,

            500,

            200, 100, 400, 200, 400, 300, 100, 200, 100, 200, 100, 300, 300,
            600, 300, 100, 200,

            600,

            800, 2000,
          ];
          const initialLength = delays.length;
          const troll = document.getElementById("troll")!;
          function type() {
            if (delays.length) {
              setTimeout(type, delays.shift());
              troll.textContent = trollText.slice(
                0,
                initialLength - delays.length
              );
            } else {
              setTimeout(del.bind(undefined, root as ChildNode), 1000);
              troll.textContent = "";
            }
          }
          setTimeout(type, 2000);

          function visible(node: ChildNode): boolean {
            if (node.nodeType === Node.COMMENT_NODE) {
              return false;
            } else if (node.nodeType === Node.TEXT_NODE) {
              return node.textContent!.trim() !== "";
            } else if ((node as any).offsetParent === undefined) {
              return true;
            } else {
              return (node as any).offsetParent !== null;
            }
          }
          const root = document.querySelector("main");
          const deletionTime = 4000;
          const removeTextCharacters = 15;
          function totalNodes(node: ChildNode): number {
            const childrenTotalNodes = [...node.childNodes]
              .filter(visible)
              .reduce((p, q) => totalNodes(q) + p, 0);
            if (node.nodeType === Node.TEXT_NODE) {
              return (
                Math.ceil(node.textContent!.length / removeTextCharacters) +
                childrenTotalNodes
              );
            } else {
              return 1 + childrenTotalNodes;
            }
          }
          const totalNodesRoot = totalNodes(root as ChildNode);
          function del(node: ChildNode) {
            const children = [...node.childNodes].filter(visible);
            if (children.length > 0) {
              del(children[Math.floor(Math.random() * children.length)]);
            } else if (node !== root) {
              if (node.nodeType === Node.TEXT_NODE) {
                const text = node.textContent!.trim();
                const indicies = new Set<number>();
                while (
                  indicies.size !== removeTextCharacters &&
                  indicies.size !== text.length
                ) {
                  indicies.add(Math.floor(Math.random() * text.length));
                }
                node.textContent = text
                  .split("")
                  .map((c, i) => (indicies.has(i) ? "" : c))
                  .join("");
              } else {
                node.remove();
              }
              setTimeout(
                del.bind(undefined, root as ChildNode),
                deletionTime / totalNodesRoot
              );
            } else {
              showTroll(root);
            }
          }
          function showTroll(root: HTMLElement) {
            root.innerHTML = document.getElementById("troll-text")!.innerHTML;
          }
        }
        document
          .getElementById("ssh-text")!
          .addEventListener("click", onSSHClick, { once: true });

        let overlay = document.getElementById("content-image-overlay")!;
        let overlayImg = overlay.firstElementChild!;
        overlay.addEventListener("click", () => {
          overlay.style.display = "none";
        });
        for (let img of document.querySelectorAll<HTMLImageElement>(
          ".content-image-positioner img"
        )) {
          img.addEventListener("click", () => {
            overlay.style.display = "flex";
            overlayImg.setAttribute("src", img.src);
            overlayImg.setAttribute("alt", img.alt);
          });
        }
        // cspell:enable
      </script>
      <main>
        <slot class="slot" />
      </main>
      <template id="troll-text">
        <div id="troll-flex-wrapper" class="input-mono">
          <span>
            ðŸ¤¨ We are sorry. This page has been made unavailable under...
            mysterious circumstances.
            <br />
            Please click <span
              id="reload-text"
              onclick="window.location.reload()">here</span
            > to reload.
          </span>
        </div>
      </template>
      <div id="copyright" class="input-mono">
        &copy; 2025 Arhan Chaudhary &#x2022; <a
          href="https://github.com/ArhanChaudhary/website">source</a
        > &#x2022; <a href="/rss.xml">rss</a>
      </div>
    </div>
    <input type="checkbox" id="nav-toggle" />
    <nav class="input-mono">
      <label for="nav-toggle" id="nav-close">
        <div class="x-rectangle first"></div>
        <div class="x-rectangle second"></div>
      </label>
      <div id="nav-grid">
        {
          ["Home", "Blog", "Projects", "Cubing", "CTFing", "Reading"].map(
            (name, i) => (
              <a
                href={i === 0 ? "/" : `/${mySlugify(name)}/`}
                class={highlightIndex === i ? "white" : undefined}
              >
                {name}
              </a>
            )
          )
        }
        {
          sshUser === "nuclear-bomb" && (
            <a href="/404" class="white">
              Not Found
            </a>
          )
        }
        <div id="nav-arrow" style={`--highlightIndex: ${highlightIndex + 1}`}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="-41 0 41 34"
            width="21"
          >
            <path
              d="M 0 0 V 24 H -28 V 34 L -41 21 L -28 8 V 18 H -6 V 0"
              fill="white"></path>
          </svg>
        </div>
      </div>
    </nav>
  </body>
</html>

<style lang="scss">
  @use "../lib/variables";

  @keyframes opacity {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }

  @keyframes fromTop {
    from {
      transform: translateY(-10px);
    }

    to {
      transform: initial;
    }
  }

  html {
    overflow: hidden;
    line-height: 1.5;
  }

  body {
    display: flex;
    height: 100dvh;
    background-color: var(--background);

    #content-image-overlay {
      display: none;
      justify-content: center;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.95);
      z-index: 9999;
      cursor: zoom-out;

      img {
        object-fit: contain;
        max-width: 100%;
      }
    }

    #flex-wrapper {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      position: relative;
      z-index: 1;
      outline: 0;
      // Layout.astro is hardcoded to this value (in nav)
      margin-right: -195px;
      padding-right: 195px;

      #ssh-text {
        cursor: pointer;
        margin: 20px 68px 20px var(--outer-padding);
        font-weight: 500;
        color: white;
        font-size: 16px;
        line-height: normal;

        #cursor {
          margin-left: 2px;
        }

        .blinking {
          animation: blink 0.9s step-start infinite;
        }
      }

      main {
        flex: 1;
        word-wrap: break-word;
        margin-left: var(--main-margin-left);
        margin-right: var(--mobile-outer-padding);
        position: relative;
        color: white;

        #troll-flex-wrapper {
          font-weight: bold;
          font-size: 28px;
          color: white;
          height: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          animation: 0.3s ease-in-out both;
          animation-name: opacity, fromTop;

          #reload-text {
            cursor: pointer;
            text-decoration: underline;
          }
        }
      }

      #copyright {
        font-size: 16px;
        font-weight: 200;
        color: hsl(0, 0%, 70%);
        margin-left: var(--outer-padding);
        margin-bottom: 11px;
        margin-right: 5px;
      }
    }

    nav {
      overflow: auto;
      font-weight: 500;
      font-size: 15px;
      position: relative;

      #nav-close {
        display: none;
        cursor: pointer;
        color: white;
        width: 55px;
        aspect-ratio: 1;
        left: 0;
        top: 0;
        justify-content: center;
        align-items: center;
        position: absolute;

        .x-rectangle {
          position: absolute;
          height: 6px;
          width: 30px;
          background-color: white;
        }

        .first {
          transform: rotate(45deg);
        }

        .second {
          transform: rotate(-45deg);
        }
      }

      #nav-grid {
        display: grid;
        // Layout.astro is hardcoded to this value (in padding)
        grid-template-columns: 80px 25px;
        column-gap: 10px;
        grid-auto-rows: min-content;
        row-gap: 30px;
        margin: 60px 40px;
        position: relative;
        z-index: 2;

        a {
          color: hsl(0, 0%, 67%);
          text-align: right;
          text-decoration-thickness: 1px;
          grid-column-start: 1;

          &.white {
            color: white;
          }
        }

        #nav-arrow {
          grid-row-start: var(--highlightIndex);
          grid-column-start: 2;
          width: 21px;
          display: flex;
          justify-content: center;
          align-items: center;
          transform: translateY(-2px);
        }
      }
    }

    #nav-hamburger {
      display: none;
      position: absolute;
      right: 0;
      top: 0;
      margin-top: 25px;
      margin-right: 25px;
      height: 33px;
      flex-flow: column;
      align-items: center;
      justify-content: space-between;
      background-color: var(--background);
      cursor: pointer;

      div {
        height: 6px;
        width: 35px;
        background-color: white;
      }
    }

    #nav-toggle {
      visibility: hidden;
      position: absolute;
    }

    @media (max-width: variables.$mobile-width) {
      #flex-wrapper {
        margin-right: initial;
        padding-right: initial;
      }

      main,
      #copyright,
      #ssh-text {
        margin-left: var(--mobile-outer-padding) !important;
      }

      #copyright {
        font-size: 14px !important;
      }

      #troll-flex-wrapper {
        font-size: 21px !important;
      }

      #nav-hamburger {
        display: flex;
      }

      #nav-close {
        display: flex !important;
      }

      nav {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        padding-right: 0;
        padding-left: 15px;
        background-color: hsl(240, 13%, 6%);
        transition: transform 0.3s;
        transform: translateX(100%);
        z-index: 1;
      }

      #nav-toggle:checked + nav {
        transform: initial;
      }
    }
  }
</style>

<style is:global lang="scss">
  // cspell:disable
  @use "../lib/variables";

  * {
    box-sizing: border-box;
  }

  html {
    font-size: 18px;
    --lb: hsl(180, 75%, 51%);
    --lr: hsl(333, 100%, 62%);
    --background: hsl(240, 6%, 10%);
    --offwhite: hsl(0, 0%, 88%);
    --outer-padding: 50px;
    --mobile-outer-padding: 12px;
    --main-margin-left: 100px;
  }

  sup a {
    color: inherit;
  }

  a {
    color: hsl(214, 84%, 65%);

    & > code:first-child {
      color: var(--offwhite) !important;
    }
  }

  p {
    margin-block-start: 1.5em;
    margin-block-end: 1.5em;
  }

  .cr {
    --c: var(--lr);
  }

  .cb {
    --c: var(--lb);
  }

  .cr,
  .cb {
    color: var(--c) !important;
  }

  hr, .footnotes::before {
    border-top: 3px solid var(--lr);
    border-bottom: 2px solid var(--lb);
    border-right: 0;
    border-left: 0;
    border-style: solid;
    background-color: white;
    height: 1px;
  }

  #max-width-wrapper {
    max-width: 70ch;
    margin-bottom: 50px;
  }

  .astro-code {
    scrollbar-color: hsl(240deg 17% 63%) hsl(240deg 21% 21%);
    padding: 1em 0;
    font-size: 14px;

    code {
      background-color: initial;
      border-radius: initial;
      padding: initial;
    }

    .line {
      display: inline-block;
      width: 100%;
      position: relative;
      padding: 0 1em;

      &.diff {
        &.add {
          --content: "+";
          --content-color: hsl(122, 43%, 64%);
          --border-color: hsl(122, 32%, 41%);
          background-color: hsl(122, 32%, 22%);
        }

        &.remove {
          --content: "-";
          --content-color: hsl(0, 57%, 55%);
          --border-color: hsl(0, 38%, 46%);
          background-color: hsl(0, 38%, 24%);
        }

        &.add::before,
        &.remove::before {
          content: var(--content);
          color: var(--content-color);
          font-size: 13px;
          left: 0;
          align-content: center;
          height: 100%;
          padding-left: 4px;
          border-left: 2px solid var(--border-color);
          box-sizing: border-box;
          position: absolute;
        }
      }
    }

    &.has-diff .line {
      padding-left: 1.5em;
    }
  }

  code {
    background-color: hsl(220, 13%, 27%);
    border-radius: 2px;
    padding: 2px 4px;
    font-size: 14px;
  }

  blockquote {
    font-style: italic;
    padding-left: 1em;
    margin-left: 0;
    margin-right: 0;
    border-left: 4px solid hsl(0, 0%, 80%);
    color: hsl(0deg 0% 70%) !important;

    * {
      color: inherit !important;
    }
  }

  summary {
    cursor: pointer;
    font-weight: bold;
  }


  .footnotes {
    &::before {
      content: "";
      display: block;
    }

    ol {
      margin-block-end: 0;
      margin-block-start: 0;
      padding-inline-start: 0;
      counter-reset: footnote;

      li {
        display: block;

        p::before {
          counter-increment: footnote;
          content: counter(footnote) " ";
          font-weight: bold;

          top: -0.5em;
          font-size: 75%;
          line-height: 0;
          position: relative;
          vertical-align: baseline;
        }
      }
    }

    .data-footnote-backref {
      font-family: monospace;
      font-size: 2em;
      line-height: 0;
      color: inherit;
      padding-left: 0.5em;
      padding-right: 0.5em;
    }

    .sr-only:not(:focus):not(:active) {
      clip: rect(0 0 0 0);
      clip-path: inset(50%);
      height: 1px;
      overflow: hidden;
      position: absolute;
      white-space: nowrap;
      width: 1px;
    }

    ::marker {
      color: red;
    }
  }

  .input-mono {
    font-family: var(--font-input-mono), Helvetica;
  }

  h1.input-mono {
    font-size: 28px;
  }

  .system-ui {
    font-family:
      system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif,
      "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  }

  .offwhite :not(h1, h2, h3, h4, h5, h6, a, svg, svg *) {
    color: var(--offwhite);
  }

  .white {
    color: white !important;
  }

  #table-of-contents + ul {
    li {
      margin-top: 4px;
      margin-bottom: 4px;
    }

    ul {
      list-style-type: disc;
    }
  }

  a.white-link,
  #table-of-contents + ul a {
    color: hsl(0, 0%, 95%);
    text-decoration: none;

    &:hover {
      text-decoration: underline;
      color: hsl(0, 0%, 85%) !important;
    }
  }

  @media (max-width: variables.$mobile-width) {
    #max-width-wrapper {
      margin-right: auto;
      margin-left: auto;
    }

    blockquote {
      padding-left: 0.6em;
    }
  }

  // cspell:enable
</style>
