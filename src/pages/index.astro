---
import Layout from "../layouts/Layout.astro";
---

<!-- cspell:ignore webring -->
<Layout title="Arhan's Homepage" sshUser="home">
  <script>
    // cspell:disable
    const trollText = "sudo rm -rf --no-preserve-root /";
    let running = false;
    function onSSHClick(e: MouseEvent) {
      e.preventDefault();
      if (running) {
        return;
      }
      running = true;
      document.getElementById("cursor")!.classList.add("blinking");
      const delays = [
        600, 400, 300, 300,

        500,

        300, 300,

        600,

        200, 300, 300,

        500,

        200, 100, 400, 200, 400, 300, 100, 200, 100, 200, 100, 300, 300, 600,
        300, 100, 200,

        600,

        800, 2000,
      ];
      const initialLength = delays.length;
      const troll = document.getElementById("troll")!;
      function type() {
        if (delays.length) {
          setTimeout(type, delays.shift());
          troll.textContent = trollText.slice(0, initialLength - delays.length);
        } else {
          setTimeout(del.bind(undefined, root as ChildNode), 1000);
          troll.textContent = "";
        }
      }
      setTimeout(type, 2000);

      function visible(node: ChildNode): boolean {
        if (node.nodeType === Node.COMMENT_NODE) {
          return false;
        } else if (node.nodeType === Node.TEXT_NODE) {
          return node.textContent!.trim() !== "";
        } else if ((node as any).offsetParent === undefined) {
          return true;
        } else {
          return (node as any).offsetParent !== null;
        }
      }
      const root = document.querySelector("main");
      const deletionTime = 4000;
      const removeTextCharacters = 15;
      function totalNodes(node: ChildNode): number {
        const childrenTotalNodes = [...node.childNodes]
          .filter(visible)
          .reduce((p, q) => totalNodes(q) + p, 0);
        if (node.nodeType === Node.TEXT_NODE) {
          return (
            Math.ceil(node.textContent!.length / removeTextCharacters) +
            childrenTotalNodes
          );
        } else {
          return 1 + childrenTotalNodes;
        }
      }
      const totalNodesRoot = totalNodes(root as ChildNode);
      function del(node: ChildNode) {
        const children = [...node.childNodes].filter(visible);
        if (children.length > 0) {
          del(children[Math.floor(Math.random() * children.length)]);
        } else if (node !== root) {
          if (node.nodeType === Node.TEXT_NODE) {
            const text = node.textContent!.trim();
            const indicies = new Set<number>();
            while (
              indicies.size !== removeTextCharacters &&
              indicies.size !== text.length
            ) {
              indicies.add(Math.floor(Math.random() * text.length));
            }
            node.textContent = text
              .split("")
              .map((c, i) => (indicies.has(i) ? "" : c))
              .join("");
          } else {
            node.remove();
          }
          setTimeout(
            del.bind(undefined, root as ChildNode),
            deletionTime / totalNodesRoot
          );
        } else {
          showTroll(root);
        }
      }
      function showTroll(root: HTMLElement) {
        root.innerHTML = document.getElementById("troll-text")!.innerHTML;
      }
    }
    document.getElementById("ssh-text")!.addEventListener("click", onSSHClick);

    let overlay = document.getElementById("content-image-overlay")!;
    let overlayImg = overlay.firstElementChild!;
    overlay.addEventListener("click", () => {
      overlay.style.display = "none";
    });
    for (let img of document.querySelectorAll<HTMLImageElement>(
      ".content-image-positioner img"
    )) {
      img.addEventListener("click", () => {
        overlay.style.display = "flex";
        overlayImg.setAttribute("src", img.src);
        overlayImg.setAttribute("alt", img.alt);
      });
    }
    // cspell:enable
  </script>
  <div id="outer-flex-wrapper">
    <div id="shape-thing-1">
      <div class="first"></div>
      <div class="second"></div>
    </div>
    <div id="max-width-wrapper">
      <div id="hi" class="input-mono">
        <span>H</span><span>i</span><span class="ignored">&nbsp;</span><span
          >t</span
        ><span>h</span><span>e</span><span>r</span><span>e</span><span>,</span
        ><span class="ignored">&nbsp;</span><span>I</span><span>'</span><span
          >m</span
        ><span class="ignored">&nbsp;</span><span>A</span><span>r</span><span
          >h</span
        ><span>a</span><span>n</span>
      </div>
      <div id="about" class="input-mono">
        <p>
          By <span class="cb c-shadow">day</span>, I am a sophomore at Purdue
          University pursuing a computer science major and an electrical
          computer engineering minor.
        </p>
        <p>
          By <span class="cr c-shadow">night</span>, you’ll catch me competing
          in CTFs, blogging about programming, obsessing over books, solving
          Rubik’s cubes, and riding my skateboard.
        </p>
      </div>
      <div id="shape-things">
        <div id="shape-thing-2">
          <div class="rectangle"></div>
          <div class="triangle first"></div>
          <div class="triangle second"></div>
        </div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div id="shape-thing-3">
          <div class="square-1"></div>
          <div class="square-2"></div>
          <div class="square-3"></div>
        </div>
        <div></div>
        <div></div>
      </div>
      <div id="webring" class="input-mono">
        <a href="https://ring.purduehackers.com/previous?host=arhan.sh">←</a><a
          href="https://ring.purduehackers.com">Purdue Hackers Webring</a
        ><a href="https://ring.purduehackers.com/next?host=arhan.sh">→</a>
      </div>
    </div>
  </div>
</Layout>

<style lang="scss">
  @use "../lib/variables";

  @keyframes shapeThing1 {
    from {
      transform: translateX(-150px);
    }

    to {
      transform: initial;
    }
  }

  @keyframes textContent {
    from {
      transform: translateX(-5px);
    }

    to {
      transform: initial;
    }
  }

  @keyframes bottomLeftShape {
    from {
      transform: translate(-10px, 10px);
    }

    to {
      transform: initial;
    }
  }

  @keyframes bottomRightShape {
    from {
      transform: translate(10px, 10px);
    }

    to {
      transform: initial;
    }
  }

  @keyframes topRightShape {
    from {
      transform: translate(10px, -10px);
    }

    to {
      transform: initial;
    }
  }

  #outer-flex-wrapper {
    display: flex;
    flex-flow: column;
    height: 100%;

    #shape-thing-1 {
      margin-bottom: 15px;
      margin-left: calc(var(--main-margin-left) * -1);
      width: 340px;
      position: relative;
      overflow: hidden;

      div {
        height: 40px;
        border-top: 40px solid;
        border-right: 40px solid transparent;
      }

      .first {
        width: calc(100% - 15px);
        animation: 0.23s ease-in-out both shapeThing1;
        border-top-color: var(--lr);
      }

      .second {
        width: 100%;
        animation: 0.2s ease-out both shapeThing1;
        border-top-color: var(--lb);
        position: relative;
        margin-top: -32px;
        z-index: -1;
      }
    }

    #max-width-wrapper {
      max-width: 79ch;
      flex: 1;
      position: relative;
      margin-bottom: initial;

      #hi {
        animation: 0.1s linear both 0.1s;
        animation-name: textContent, opacity;
        font-weight: bold;
        font-size: 28px;
        height: 47px;
        line-height: 32.2px;
        display: table-cell;
        vertical-align: bottom;

        :not(.ignored) {
          transition: font-size 0.2s linear;

          &:hover {
            transition: 0.35s cubic-bezier(0.26, 0.39, 0.22, 3.14);
            font-size: 45px;
          }
        }
      }

      #about {
        animation: 0.1s linear both 0.1s;
        animation-name: textContent, opacity;
        margin-top: 50px;
        font-weight: 200;
        padding-right: 20px;

        .c-shadow {
          text-shadow: 0 0 2px var(--c);
        }
      }

      #shape-things {
        margin-top: 65px;
        margin-bottom: 70px;
        position: relative;
        display: flex;
        justify-content: space-around;
        --shape-animation: 0.2s ease-in-out;

        #shape-thing-2 {
          width: 223px;
          height: 212px;
          position: relative;

          &:hover .triangle {
            &.first {
              top: 16px;
              right: -10px;
            }

            &.second {
              bottom: -10px;
              left: -10px;
            }
          }

          .triangle {
            position: absolute;
            border-bottom: 104px solid;
            border-right: 53px solid transparent;
            border-left: 53px solid transparent;
            transition: var(--shape-animation);

            &.first {
              transition-property: top, right;
              animation: var(--shape-animation) both;
              animation-name: topRightShape, opacity;
              right: 0;
              top: 26px;
              border-bottom-color: var(--lr);
            }

            &.second {
              transition-property: left, bottom;
              animation: var(--shape-animation) both;
              animation-name: bottomLeftShape, opacity;
              left: 0;
              bottom: 0;
              border-bottom-color: var(--lb);
            }
          }

          .rectangle {
            animation: 0.3s ease-in-out both opacity;
            position: absolute;
            left: 24px;
            width: 165px;
            aspect-ratio: 194 / 224;
            border: 2px solid white;
          }
        }

        #shape-thing-3 {
          margin-top: 15px;
          width: 182px;
          height: 212px;
          position: relative;

          &:hover {
            .square-2 {
              top: -10px;
              right: -10px;
            }

            .square-3 {
              bottom: -10px;
              right: 30px;
            }
          }

          div {
            aspect-ratio: 1;
            position: absolute;
          }

          .square-1 {
            animation: 0.3s ease-in-out both opacity;
            width: 119px;
            top: 40px;
            border: 2px solid white;
          }

          .square-2 {
            animation: var(--shape-animation) both;
            animation-name: topRightShape, opacity;
            transition: var(--shape-animation);
            transition-property: top, right;
            top: 0;
            right: 0;
            width: 90px;
            background-color: var(--lb);
          }

          .square-3 {
            animation: var(--shape-animation) both;
            animation-name: bottomRightShape, opacity;
            transition: var(--shape-animation);
            transition-property: bottom, right;
            bottom: 0;
            right: 40px;
            width: 90px;
            background-color: var(--lr);
          }
        }
      }

      #webring {
        font-size: 16px;
        position: absolute;
        display: flex;
        gap: 16px;
        bottom: -24px;
        right: 20px;

        a {
          text-decoration: none;
          // color: hsl(0, 0%, 70%);
          color: inherit;
        }
      }
    }
  }

  @media (max-width: variables.$mobile-width - 300px) {
    #shape-things > :not(#shape-thing-3, :last-child) {
      display: none !important;
    }

    :global(#copyright) {
      visibility: hidden;
    }
  }

  @media (max-width: variables.$mobile-width) {
    #shape-thing-1 {
      margin-left: calc(var(--mobile-outer-padding) * -1) !important;
      /* Layout.astro soft coded to this value */
      width: 270px !important;
    }
  }

  // @media (min-width: variables.$mobile-width) and (max-width: variables.$mobile-width + 50px) {
  //   :global(#copyright) {
  //     visibility: hidden;
  //   }
  // }
</style>
