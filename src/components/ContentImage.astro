---
import { Picture } from "astro:assets";

interface Props {
  src: ImageMetadata;
  alt: string;
  desc?: string;
  width?: number | string;
  visualWidth?: number | string;
  // biome-ignore lint/suspicious/noExplicitAny: <explanation>
  [key: string]: any;
}

let { src, alt, desc, width, visualWidth, ...attrs } = Astro.props;
if ("style" in attrs) {
  throw new Error("style is not allowed in ContentImage");
}
if ("height" in attrs) {
  throw new Error("height is not allowed in ContentImage");
}
if (width === undefined) {
  throw new Error("width is required in ContentImage");
}
// if width is a string, convert it to a number
if (typeof width === "string") {
  width = parseInt(width, 10);
  if (isNaN(width)) {
    throw new Error("width must be a number in ContentImage");
  }
}
if (typeof visualWidth === "string") {
  visualWidth = parseInt(visualWidth, 10);
  if (isNaN(visualWidth)) {
    throw new Error("visualWidth must be a number in ContentImage");
  }
}
if (width === null) {
  width = src.width;
}

if (visualWidth && visualWidth > width) {
  throw new Error("visualWidth cannot be greater than width in ContentImage");
}
---

<div class="content-image-positioner">
  <span class="content-image-wrapper">
    <Picture
      formats={["avif", "webp"]}
      {src}
      {alt}
      {...attrs}
      style={visualWidth === undefined
        ? undefined
        : `max-width: min(100%, ${visualWidth}px);`}
      {width}
    />
    {
      desc && (
        <div
          class="content-image-alt-text"
          set:html={desc}
          style={`max-width: ${visualWidth === undefined ? width : visualWidth}px;`}
        />
      )
    }
  </span>
</div>

<style lang="scss">
  .content-image-positioner {
    .content-image-wrapper {
      img {
        cursor: zoom-in;
        margin: 0 auto;
        max-width: 100%;
        height: auto;
        display: block;
      }

      .content-image-alt-text {
        margin: 3px auto 1em auto;
        font-style: italic;
        color: hsl(0deg 0% 70%);
      }
    }
  }
</style>
